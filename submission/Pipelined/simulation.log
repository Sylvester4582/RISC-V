WARNING: src/instruction_memory.v:22: $readmemb(testcase.txt): Not enough words in the file for the requested range [0:127].

Instruction memory contents:

Instruction Memory[0] = 00000000001000011000001100110011 (hex: 00218333)
Instruction Memory[1] = 00000000000100110000001110110011 (hex: 001303b3)
Instruction Memory[2] = 00000000011100110000010000110011 (hex: 00730433)
Instruction Memory[3] = 00000000000000100011011000000011 (hex: 00023603)
Instruction Memory[4] = 01000000001101100000010010110011 (hex: 403604b3)
Instruction Memory[5] = 00000000001100001110010100110011 (hex: 0030e533)
Instruction Memory[6] = 00000000001100001111010110110011 (hex: 0030f5b3)
Instruction Memory[7] = 00000000011100100011100000100011 (hex: 00723823)
Instruction Memory[8] = 00000000010101101000011010110011 (hex: 005686b3)
Instruction Memory[9] = 11111110000101101001110011100011 (hex: fe169ce3)
Instruction Memory[10] = 00000000000000000000000000010011 (hex: 00000013)
Instruction Memory[11] = 00000000000000000000000000010011 (hex: 00000013)
Instruction Memory[12] = 00000000000000000000000000010011 (hex: 00000013)
Instruction Memory[13] = 00000000000000000000000000010011 (hex: 00000013)
Instruction Memory[14] = 00000000000000000000000000010011 (hex: 00000013)
Instruction Memory[15] = 00000000000000000000000000010011 (hex: 00000013)
Instruction Memory[16] = 00000000000000000000000000010011 (hex: 00000013)
Instruction Memory[17] = 00000000000000000000000000010011 (hex: 00000013)
Instruction Memory[18] = 00000000000000000000000000010011 (hex: 00000013)
Instruction Memory[19] = 00000000000000000000000000010011 (hex: 00000013)
[INIT] Register file initialized with test values:
    x1  = 0x0000000000000005
    x2  = 0x0000000000000006
    x3  = 0x0000000000000009
    x4  = 0x0000000000000008
    x5  = 0x0000000000000001

VCD info: dumpfile results/main_tb.vcd opened for output.
PC initialized to 0x0000000000000000
[IMM_GEN] Type=xxx Value=0x0000000000000000

[CYCLE 1] ==============================
  [IF] PC: 0x0000000000000000 | Instr: 0x00218333 (     ADD)
  [ID] Instruction: UNKNOWN?
  [EX] ALU: RS1=0x0000000000000000, RS2=0x0000000000000000
==========================================
[IMM_GEN] Type=000 Value=0x0000000000000002

[CYCLE 2] ==============================
  [IF] PC: 0x0000000000000004 | Instr: 0x001303b3 (     ADD)
  [ID] Instruction:      ADD
  [EX] ALU: RS1=0x0000000000000000, RS2=0x0000000000000000
==========================================
[IMM_GEN] Type=000 Value=0x0000000000000001

[CYCLE 3] ==============================
  [IF] PC: 0x0000000000000008 | Instr: 0x00730433 (     ADD)
  [ID] Instruction:      ADD
  [EX] ALU: RS1=0x0000000000000009, RS2=0x0000000000000006
==========================================
[FORWARD] EX_RS1= 6, EX_RS2= 1, MEM_RD= 6, WB_RD= 0, FWD_A=10, FWD_B=00
[IMM_GEN] Type=000 Value=0x0000000000000007

[CYCLE 4] ==============================
  [IF] PC: 0x000000000000000c | Instr: 0x00023603 (      LD)
  [ID] Instruction:      ADD
  [EX] ALU: RS1=0x000000000000000f, RS2=0x0000000000000005
==========================================
[IMM_GEN] Type=000 Value=0x0000000000000000
[FORWARD] EX_RS1= 6, EX_RS2= 7, MEM_RD= 7, WB_RD= 6, FWD_A=01, FWD_B=10

[CYCLE 5] ==============================
  [IF] PC: 0x0000000000000010 | Instr: 0x403604b3 (     SUB)
  [ID] Instruction:       LD
  [EX] ALU: RS1=0x000000000000000f, RS2=0x0000000000000014
  [WB] Register: x6 ← 0x000000000000000f
==========================================
[REGISTER] Write: x6 = 0x000000000000000f
[IMM_GEN] Type=000 Value=0x0000000000000403

[CYCLE 6] ==============================
  [IF] PC: 0x0000000000000014 | Instr: 0x0030e533 (      OR)
  [ID] Stalled
  [EX] Flushed
  [WB] Register: x7 ← 0x0000000000000014
  [CTRL] Branch=0 Stall_IF=1 Stall_ID=1 Flush_EX=1
==========================================
[REGISTER] Write: x7 = 0x0000000000000014

[CYCLE 7] ==============================
  [IF] PC: 0x0000000000000014 | Instr: 0x0030e533 (      OR)
  [ID] Instruction:      SUB
  [EX] ALU: RS1=0x0000000000000000, RS2=0x0000000000000000
  [MEM] Read: Addr=0x0000000000000008 → Data=0x0000000000000014
  [WB] Register: x8 ← 0x0000000000000023
==========================================
[REGISTER] Write: x8 = 0x0000000000000023
[FORWARD] EX_RS1=12, EX_RS2= 3, MEM_RD= 0, WB_RD=12, FWD_A=01, FWD_B=00
[IMM_GEN] Type=000 Value=0x0000000000000003

[CYCLE 8] ==============================
  [IF] PC: 0x0000000000000018 | Instr: 0x0030f5b3 (     AND)
  [ID] Instruction:       OR
  [EX] ALU: RS1=0x0000000000000014, RS2=0x0000000000000009
  [WB] Register: x12 ← 0x0000000000000014
==========================================
[REGISTER] Write: x12 = 0x0000000000000014

[CYCLE 9] ==============================
  [IF] PC: 0x000000000000001c | Instr: 0x00723823 (      SD)
  [ID] Instruction:      AND
  [EX] ALU: RS1=0x0000000000000005, RS2=0x0000000000000009
==========================================
[IMM_GEN] Type=000 Value=0x0000000000000007
[IMM_GEN] Type=001 Value=0x0000000000000010

[CYCLE 10] ==============================
  [IF] PC: 0x0000000000000020 | Instr: 0x005686b3 (     ADD)
  [ID] Instruction:       SD
  [EX] ALU: RS1=0x0000000000000005, RS2=0x0000000000000009
  [WB] Register: x9 ← 0x000000000000000b
==========================================
[REGISTER] Write: x9 = 0x000000000000000b
[IMM_GEN] Type=001 Value=0x000000000000000d
[IMM_GEN] Type=000 Value=0x0000000000000005

[CYCLE 11] ==============================
  [IF] PC: 0x0000000000000024 | Instr: 0xfe169ce3 (     BNE)
  [ID] Instruction:      ADD
  [EX] ALU: RS1=0x0000000000000008, Imm=0x0000000000000010
  [WB] Register: x10 ← 0x000000000000000d
==========================================
[REGISTER] Write: x10 = 0x000000000000000d
[IMM_GEN] Type=000 Value=0xffffffffffffffe1
[BRANCH] BNE taken: PC=0x0000000000000024 → 0x0000000000000005 (rs1=0x0000000000000000 != rs2=0x0000000000000005)
[IMM_GEN] Type=010 Value=0xfffffffffffffff8

[CYCLE 12] ==============================
  [IF] PC: 0x0000000000000028 | Instr: 0x00000013 (    ADDI)
  [ID] Stalled
  [EX] Flushed
  [MEM] Write: Addr=0x0000000000000018 ← Data=0x0000000000000014
  [WB] Register: x11 ← 0x0000000000000001
  [CTRL] Branch=1 Stall_IF=1 Stall_ID=1 Flush_EX=1
==========================================
[REGISTER] Write: x11 = 0x0000000000000001
[MEMORY] Write: Addr=0x0000000000000018 Data=0x0000000000000014
[BRANCH] BNE taken: PC=0x0000000000000000 → 0xfffffffffffffff8 (rs1=0x0000000000000000 != rs2=0x0000000000000005)
[IMM_GEN] Type=010 Value=0x0000000000000000
[IMM_GEN] Type=000 Value=0x0000000000000000

[CYCLE 13] ==============================
  [IF] PC: 0x0000000000000028 | Instr: 0x00000013 (    ADDI)
  [ID] Instruction: UNKNOWN?
  [EX] ALU: RS1=0x0000000000000000, RS2=0x0000000000000000
==========================================

[CYCLE 14] ==============================
  [IF] PC: 0x000000000000002c | Instr: 0x00000013 (    ADDI)
  [ID] Instruction:     ADDI
  [EX] ALU: RS1=0x0000000000000000, RS2=0x0000000000000000
  [WB] Register: x13 ← 0x0000000000000001
==========================================
[REGISTER] Write: x13 = 0x0000000000000001

[CYCLE 15] ==============================
  [IF] PC: 0x0000000000000030 | Instr: 0x00000013 (    ADDI)
  [ID] Instruction:     ADDI
  [EX] ALU: RS1=0x0000000000000000, Imm=0x0000000000000000
==========================================

[CYCLE 16] ==============================
  [IF] PC: 0x0000000000000034 | Instr: 0x00000013 (    ADDI)
  [ID] Instruction:     ADDI
  [EX] ALU: RS1=0x0000000000000000, Imm=0x0000000000000000
==========================================

[CYCLE 17] ==============================
  [IF] PC: 0x0000000000000038 | Instr: 0x00000013 (    ADDI)
  [ID] Instruction:     ADDI
  [EX] ALU: RS1=0x0000000000000000, Imm=0x0000000000000000
==========================================

[CYCLE 18] ==============================
  [IF] PC: 0x000000000000003c | Instr: 0x00000013 (    ADDI)
  [ID] Instruction:     ADDI
  [EX] ALU: RS1=0x0000000000000000, Imm=0x0000000000000000
==========================================

[CYCLE 19] ==============================
  [IF] PC: 0x0000000000000040 | Instr: 0x00000013 (    ADDI)
  [ID] Instruction:     ADDI
  [EX] ALU: RS1=0x0000000000000000, Imm=0x0000000000000000
==========================================

[CYCLE 20] ==============================
  [IF] PC: 0x0000000000000044 | Instr: 0x00000013 (    ADDI)
  [ID] Instruction:     ADDI
  [EX] ALU: RS1=0x0000000000000000, Imm=0x0000000000000000
==========================================

[CYCLE 21] ==============================
  [IF] PC: 0x0000000000000048 | Instr: 0x00000013 (    ADDI)
  [ID] Instruction:     ADDI
  [EX] ALU: RS1=0x0000000000000000, Imm=0x0000000000000000
==========================================

==================== SIMULATION RESULTS ====================
[FINAL] Register State:
    x0  =          0 (0x0000000000000000)
    x1  =          5 (0x0000000000000005)
    x2  =          6 (0x0000000000000006)
    x3  =          9 (0x0000000000000009)
    x4  =          8 (0x0000000000000008)
    x5  =          1 (0x0000000000000001)
    x6  =         15 (0x000000000000000f)
    x7  =         20 (0x0000000000000014)
    x8  =         35 (0x0000000000000023)
    x9  =         11 (0x000000000000000b)
    x10 =         13 (0x000000000000000d)
    x11 =          1 (0x0000000000000001)
    x12 =         20 (0x0000000000000014)
    x13 =          1 (0x0000000000000001)

[FINAL] Memory State [0-10]:
    Mem[0  ] =         10 (0x000000000000000a)
    Mem[1  ] =         20 (0x0000000000000014)
    Mem[2  ] =         30 (0x000000000000001e)
    Mem[3  ] =         20 (0x0000000000000014)
============================================================

main_tb.v:54: $finish called at 225 (1s)
