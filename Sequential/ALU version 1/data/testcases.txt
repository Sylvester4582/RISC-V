// iverilog -o alu_output .\src\full_adder.v .\src\adder_64bit.v .\src\subtractor_64bit.v .\src\logical_operators.v .\src\shift_operators.v .\src\comparator.v .\src\alu.v .\src\alu_tb.v
// vvp alu_output

// Format: funct3 funct7 rs1 rs2 expected_rd
// Each line: 3'bxxx 7'bxxxxxxx 64'hxxxxxxxxxxxxxxxx 64'hxxxxxxxxxxxxxxxx 64'hxxxxxxxxxxxxxxxx

// ADD tests (funct3=000, funct7=0000000)

000 0000000 0000000000000005 0000000000000003 0000000000000008
000 0000000 FFFFFFFFFFFFFFFF 0000000000000001 0000000000000000
000 0000000 7FFFFFFFFFFFFFFF 0000000000000001 8000000000000000
000 0000000 0000000000000000 0000000000000000 0000000000000000
000 0000000 FFFFFFFFFFFFFFFF FFFFFFFFFFFFFFFF FFFFFFFFFFFFFFFE

// SUB tests (funct3=000, funct7=0100000)

000 0100000 0000000000000005 0000000000000003 0000000000000002
000 0100000 0000000000000000 0000000000000001 FFFFFFFFFFFFFFFF
000 0100000 8000000000000000 0000000000000001 7FFFFFFFFFFFFFFF
000 0100000 0000000000000000 0000000000000000 0000000000000000
000 0100000 FFFFFFFFFFFFFFFF FFFFFFFFFFFFFFFF 0000000000000000

// AND tests (funct3=111, funct7=0000000)

111 0000000 00000000000000FF 000000000000000F 000000000000000F
111 0000000 FFFFFFFFFFFFFFFF FFFFFFFFFFFFFFFF FFFFFFFFFFFFFFFF
111 0000000 0000000000000000 FFFFFFFFFFFFFFFF 0000000000000000
111 0000000 AAAAAAAAAAAAAAAAA 5555555555555555 0000000000000000

// OR tests (funct3=110, funct7=0000000)

110 0000000 00000000000000F0 000000000000000F 00000000000000FF
110 0000000 FFFFFFFFFFFFFFFF 0000000000000000 FFFFFFFFFFFFFFFF
110 0000000 0000000000000000 0000000000000000 0000000000000000
110 0000000 AAAAAAAAAAAAAAAA 5555555555555555 FFFFFFFFFFFFFFFF

// XOR tests (funct3=100, funct7=0000000)

100 0000000 00000000000000FF 000000000000000F 00000000000000F0
100 0000000 FFFFFFFFFFFFFFFF FFFFFFFFFFFFFFFF 0000000000000000
100 0000000 FFFFFFFFFFFFFFFF 0000000000000000 FFFFFFFFFFFFFFFF
100 0000000 AAAAAAAAAAAAAAAA 5555555555555555 FFFFFFFFFFFFFFFF

// SLL tests (funct3=001, funct7=0000000)

001 0000000 0000000000000001 0000000000000002 0000000000000004
001 0000000 FFFFFFFFFFFFFFFF 000000000000003F 8000000000000000
001 0000000 FFFFFFFFFFFFFFFF 0000000000000040 0000000000000000
001 0000000 0000000000000001 0000000000000000 0000000000000001

// SRL tests (funct3=101, funct7=0000000)

101 0000000 8000000000000000 0000000000000001 4000000000000000
101 0000000 FFFFFFFFFFFFFFFF 000000000000003F 0000000000000001
101 0000000 FFFFFFFFFFFFFFFF 0000000000000040 0000000000000000
101 0000000 FFFFFFFFFFFFFFFF 0000000000000000 FFFFFFFFFFFFFFFF

// SRA tests (funct3=101, funct7=0100000)

101 0100000 8000000000000000 0000000000000001 C000000000000000
101 0100000 8000000000000000 000000000000003F FFFFFFFFFFFFFFFF
101 0100000 7FFFFFFFFFFFFFFF 000000000000003F 0000000000000000
101 0100000 8000000000000000 0000000000000000 8000000000000000

// SLT tests (funct3=010, funct7=0000000)

010 0000000 FFFFFFFFFFFFFFFF 0000000000000000 0000000000000001
010 0000000 8000000000000000 7FFFFFFFFFFFFFFF 0000000000000001
010 0000000 0000000000000000 0000000000000000 0000000000000000
010 0000000 7FFFFFFFFFFFFFFF 8000000000000000 0000000000000000

// SLTU tests (funct3=011, funct7=0000000)

011 0000000 0000000000000000 0000000000000001 0000000000000001
011 0000000 FFFFFFFFFFFFFFFF 0000000000000000 0000000000000000
011 0000000 0000000000000000 FFFFFFFFFFFFFFFF 0000000000000001
011 0000000 FFFFFFFFFFFFFFFF FFFFFFFFFFFFFFFF 0000000000000000